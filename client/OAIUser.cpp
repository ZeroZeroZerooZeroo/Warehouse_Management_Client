/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_login_isSet = false;
    m_last_login_isValid = false;

    m_inn_isSet = false;
    m_inn_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_role_id_isSet = false;
    m_role_id_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_last_login_isValid = ::OpenAPI::fromJsonValue(m_last_login, json[QString("last_login")]);
    m_last_login_isSet = !json[QString("last_login")].isNull() && m_last_login_isValid;

    m_inn_isValid = ::OpenAPI::fromJsonValue(m_inn, json[QString("inn")]);
    m_inn_isSet = !json[QString("inn")].isNull() && m_inn_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_role_id_isValid = ::OpenAPI::fromJsonValue(m_role_id, json[QString("role_id")]);
    m_role_id_isSet = !json[QString("role_id")].isNull() && m_role_id_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_login_isSet) {
        obj.insert(QString("last_login"), ::OpenAPI::toJsonValue(m_last_login));
    }
    if (m_inn_isSet) {
        obj.insert(QString("inn"), ::OpenAPI::toJsonValue(m_inn));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_role_id_isSet) {
        obj.insert(QString("role_id"), ::OpenAPI::toJsonValue(m_role_id));
    }
    return obj;
}

qint64 OAIUser::getUserId() const {
    return m_user_id;
}
void OAIUser::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUser::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUser::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIUser::getPassword() const {
    return m_password;
}
void OAIUser::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUser::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUser::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUser::getRole() const {
    return m_role;
}
void OAIUser::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIUser::is_role_Set() const{
    return m_role_isSet;
}

bool OAIUser::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIUser::isIsActive() const {
    return m_is_active;
}
void OAIUser::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAIUser::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIUser::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QDateTime OAIUser::getCreatedAt() const {
    return m_created_at;
}
void OAIUser::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUser::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUser::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIUser::getLastLogin() const {
    return m_last_login;
}
void OAIUser::setLastLogin(const QDateTime &last_login) {
    m_last_login = last_login;
    m_last_login_isSet = true;
}

bool OAIUser::is_last_login_Set() const{
    return m_last_login_isSet;
}

bool OAIUser::is_last_login_Valid() const{
    return m_last_login_isValid;
}

QString OAIUser::getInn() const {
    return m_inn;
}
void OAIUser::setInn(const QString &inn) {
    m_inn = inn;
    m_inn_isSet = true;
}

bool OAIUser::is_inn_Set() const{
    return m_inn_isSet;
}

bool OAIUser::is_inn_Valid() const{
    return m_inn_isValid;
}

QString OAIUser::getOrganization() const {
    return m_organization;
}
void OAIUser::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIUser::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIUser::is_organization_Valid() const{
    return m_organization_isValid;
}

qint64 OAIUser::getRoleId() const {
    return m_role_id;
}
void OAIUser::setRoleId(const qint64 &role_id) {
    m_role_id = role_id;
    m_role_id_isSet = true;
}

bool OAIUser::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAIUser::is_role_id_Valid() const{
    return m_role_id_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_id_isValid && m_username_isValid && m_password_isValid && m_email_isValid && m_role_isValid && m_created_at_isValid && m_last_login_isValid && m_role_id_isValid && true;
}

} // namespace OpenAPI
