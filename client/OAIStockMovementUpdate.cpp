/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStockMovementUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStockMovementUpdate::OAIStockMovementUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStockMovementUpdate::OAIStockMovementUpdate() {
    this->initializeModel();
}

OAIStockMovementUpdate::~OAIStockMovementUpdate() {}

void OAIStockMovementUpdate::initializeModel() {

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_movement_type_isSet = false;
    m_movement_type_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;
}

void OAIStockMovementUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStockMovementUpdate::fromJsonObject(QJsonObject json) {

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_movement_type_isValid = ::OpenAPI::fromJsonValue(m_movement_type, json[QString("movement_type")]);
    m_movement_type_isSet = !json[QString("movement_type")].isNull() && m_movement_type_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;
}

QString OAIStockMovementUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStockMovementUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_movement_type_isSet) {
        obj.insert(QString("movement_type"), ::OpenAPI::toJsonValue(m_movement_type));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    return obj;
}

double OAIStockMovementUpdate::getQuantity() const {
    return m_quantity;
}
void OAIStockMovementUpdate::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIStockMovementUpdate::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIStockMovementUpdate::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIStockMovementUpdate::getMovementType() const {
    return m_movement_type;
}
void OAIStockMovementUpdate::setMovementType(const QString &movement_type) {
    m_movement_type = movement_type;
    m_movement_type_isSet = true;
}

bool OAIStockMovementUpdate::is_movement_type_Set() const{
    return m_movement_type_isSet;
}

bool OAIStockMovementUpdate::is_movement_type_Valid() const{
    return m_movement_type_isValid;
}

double OAIStockMovementUpdate::getCost() const {
    return m_cost;
}
void OAIStockMovementUpdate::setCost(const double &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIStockMovementUpdate::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIStockMovementUpdate::is_cost_Valid() const{
    return m_cost_isValid;
}

QString OAIStockMovementUpdate::getComments() const {
    return m_comments;
}
void OAIStockMovementUpdate::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIStockMovementUpdate::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIStockMovementUpdate::is_comments_Valid() const{
    return m_comments_isValid;
}

bool OAIStockMovementUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_movement_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStockMovementUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
