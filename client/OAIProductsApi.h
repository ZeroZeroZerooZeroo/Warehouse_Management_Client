/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductsApi_H
#define OAI_OAIProductsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProduct.h"
#include "OAIProductCategory.h"
#include "OAIProductCategoryCreate.h"
#include "OAIProductCategoryUpdate.h"
#include "OAIProductCreate.h"
#include "OAIProductUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductsApi : public QObject {
    Q_OBJECT

public:
    OAIProductsApi(const int timeOut = 0);
    ~OAIProductsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  category_id qint32 [required]
    */
    virtual void productCategoriesCategoryIdDELETE(const qint32 &category_id);

    /**
    * @param[in]  category_id qint32 [required]
    */
    virtual void productCategoriesCategoryIdGET(const qint32 &category_id);

    /**
    * @param[in]  category_id qint32 [required]
    * @param[in]  oai_product_category_update OAIProductCategoryUpdate [required]
    */
    virtual void productCategoriesCategoryIdPUT(const qint32 &category_id, const OAIProductCategoryUpdate &oai_product_category_update);


    virtual void productCategoriesGET();

    /**
    * @param[in]  oai_product_category_create OAIProductCategoryCreate [required]
    */
    virtual void productCategoriesPOST(const OAIProductCategoryCreate &oai_product_category_create);


    virtual void productsGET();

    /**
    * @param[in]  oai_product_create OAIProductCreate [required]
    */
    virtual void productsPOST(const OAIProductCreate &oai_product_create);

    /**
    * @param[in]  product_id qint32 [required]
    */
    virtual void productsProductIdDELETE(const qint32 &product_id);

    /**
    * @param[in]  product_id qint32 [required]
    */
    virtual void productsProductIdGET(const qint32 &product_id);

    /**
    * @param[in]  product_id qint32 [required]
    * @param[in]  oai_product_update OAIProductUpdate [required]
    */
    virtual void productsProductIdPUT(const qint32 &product_id, const OAIProductUpdate &oai_product_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productCategoriesCategoryIdDELETECallback(OAIHttpRequestWorker *worker);
    void productCategoriesCategoryIdGETCallback(OAIHttpRequestWorker *worker);
    void productCategoriesCategoryIdPUTCallback(OAIHttpRequestWorker *worker);
    void productCategoriesGETCallback(OAIHttpRequestWorker *worker);
    void productCategoriesPOSTCallback(OAIHttpRequestWorker *worker);
    void productsGETCallback(OAIHttpRequestWorker *worker);
    void productsPOSTCallback(OAIHttpRequestWorker *worker);
    void productsProductIdDELETECallback(OAIHttpRequestWorker *worker);
    void productsProductIdGETCallback(OAIHttpRequestWorker *worker);
    void productsProductIdPUTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productCategoriesCategoryIdDELETESignal();
    void productCategoriesCategoryIdGETSignal(OAIProductCategory summary);
    void productCategoriesCategoryIdPUTSignal(OAIProductCategory summary);
    void productCategoriesGETSignal(QList<OAIProductCategory> summary);
    void productCategoriesPOSTSignal(OAIProductCategory summary);
    void productsGETSignal(QList<OAIProduct> summary);
    void productsPOSTSignal(OAIProduct summary);
    void productsProductIdDELETESignal();
    void productsProductIdGETSignal(OAIProduct summary);
    void productsProductIdPUTSignal(OAIProduct summary);


    void productCategoriesCategoryIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void productCategoriesCategoryIdGETSignalFull(OAIHttpRequestWorker *worker, OAIProductCategory summary);
    void productCategoriesCategoryIdPUTSignalFull(OAIHttpRequestWorker *worker, OAIProductCategory summary);
    void productCategoriesGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIProductCategory> summary);
    void productCategoriesPOSTSignalFull(OAIHttpRequestWorker *worker, OAIProductCategory summary);
    void productsGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIProduct> summary);
    void productsPOSTSignalFull(OAIHttpRequestWorker *worker, OAIProduct summary);
    void productsProductIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void productsProductIdGETSignalFull(OAIHttpRequestWorker *worker, OAIProduct summary);
    void productsProductIdPUTSignalFull(OAIHttpRequestWorker *worker, OAIProduct summary);

    Q_DECL_DEPRECATED_X("Use productCategoriesCategoryIdDELETESignalError() instead")
    void productCategoriesCategoryIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesCategoryIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesCategoryIdGETSignalError() instead")
    void productCategoriesCategoryIdGETSignalE(OAIProductCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesCategoryIdGETSignalError(OAIProductCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesCategoryIdPUTSignalError() instead")
    void productCategoriesCategoryIdPUTSignalE(OAIProductCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesCategoryIdPUTSignalError(OAIProductCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesGETSignalError() instead")
    void productCategoriesGETSignalE(QList<OAIProductCategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesGETSignalError(QList<OAIProductCategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesPOSTSignalError() instead")
    void productCategoriesPOSTSignalE(OAIProductCategory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesPOSTSignalError(OAIProductCategory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGETSignalError() instead")
    void productsGETSignalE(QList<OAIProduct> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGETSignalError(QList<OAIProduct> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsPOSTSignalError() instead")
    void productsPOSTSignalE(OAIProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsPOSTSignalError(OAIProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsProductIdDELETESignalError() instead")
    void productsProductIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsProductIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsProductIdGETSignalError() instead")
    void productsProductIdGETSignalE(OAIProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsProductIdGETSignalError(OAIProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsProductIdPUTSignalError() instead")
    void productsProductIdPUTSignalE(OAIProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsProductIdPUTSignalError(OAIProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productCategoriesCategoryIdDELETESignalErrorFull() instead")
    void productCategoriesCategoryIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesCategoryIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesCategoryIdGETSignalErrorFull() instead")
    void productCategoriesCategoryIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesCategoryIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesCategoryIdPUTSignalErrorFull() instead")
    void productCategoriesCategoryIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesCategoryIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesGETSignalErrorFull() instead")
    void productCategoriesGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productCategoriesPOSTSignalErrorFull() instead")
    void productCategoriesPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCategoriesPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGETSignalErrorFull() instead")
    void productsGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsPOSTSignalErrorFull() instead")
    void productsPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsProductIdDELETESignalErrorFull() instead")
    void productsProductIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsProductIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsProductIdGETSignalErrorFull() instead")
    void productsProductIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsProductIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsProductIdPUTSignalErrorFull() instead")
    void productsProductIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsProductIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
