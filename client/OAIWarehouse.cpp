/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWarehouse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWarehouse::OAIWarehouse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWarehouse::OAIWarehouse() {
    this->initializeModel();
}

OAIWarehouse::~OAIWarehouse() {}

void OAIWarehouse::initializeModel() {

    m_warehouse_id_isSet = false;
    m_warehouse_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_address_isSet = false;
    m_address_isValid = false;

    m_total_capacity_isSet = false;
    m_total_capacity_isValid = false;

    m_current_utilization_isSet = false;
    m_current_utilization_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIWarehouse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWarehouse::fromJsonObject(QJsonObject json) {

    m_warehouse_id_isValid = ::OpenAPI::fromJsonValue(m_warehouse_id, json[QString("warehouse_id")]);
    m_warehouse_id_isSet = !json[QString("warehouse_id")].isNull() && m_warehouse_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_total_capacity_isValid = ::OpenAPI::fromJsonValue(m_total_capacity, json[QString("total_capacity")]);
    m_total_capacity_isSet = !json[QString("total_capacity")].isNull() && m_total_capacity_isValid;

    m_current_utilization_isValid = ::OpenAPI::fromJsonValue(m_current_utilization, json[QString("current_utilization")]);
    m_current_utilization_isSet = !json[QString("current_utilization")].isNull() && m_current_utilization_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIWarehouse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWarehouse::asJsonObject() const {
    QJsonObject obj;
    if (m_warehouse_id_isSet) {
        obj.insert(QString("warehouse_id"), ::OpenAPI::toJsonValue(m_warehouse_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_total_capacity_isSet) {
        obj.insert(QString("total_capacity"), ::OpenAPI::toJsonValue(m_total_capacity));
    }
    if (m_current_utilization_isSet) {
        obj.insert(QString("current_utilization"), ::OpenAPI::toJsonValue(m_current_utilization));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

qint64 OAIWarehouse::getWarehouseId() const {
    return m_warehouse_id;
}
void OAIWarehouse::setWarehouseId(const qint64 &warehouse_id) {
    m_warehouse_id = warehouse_id;
    m_warehouse_id_isSet = true;
}

bool OAIWarehouse::is_warehouse_id_Set() const{
    return m_warehouse_id_isSet;
}

bool OAIWarehouse::is_warehouse_id_Valid() const{
    return m_warehouse_id_isValid;
}

QString OAIWarehouse::getName() const {
    return m_name;
}
void OAIWarehouse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWarehouse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWarehouse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIWarehouse::getAddress() const {
    return m_address;
}
void OAIWarehouse::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIWarehouse::is_address_Set() const{
    return m_address_isSet;
}

bool OAIWarehouse::is_address_Valid() const{
    return m_address_isValid;
}

double OAIWarehouse::getTotalCapacity() const {
    return m_total_capacity;
}
void OAIWarehouse::setTotalCapacity(const double &total_capacity) {
    m_total_capacity = total_capacity;
    m_total_capacity_isSet = true;
}

bool OAIWarehouse::is_total_capacity_Set() const{
    return m_total_capacity_isSet;
}

bool OAIWarehouse::is_total_capacity_Valid() const{
    return m_total_capacity_isValid;
}

double OAIWarehouse::getCurrentUtilization() const {
    return m_current_utilization;
}
void OAIWarehouse::setCurrentUtilization(const double &current_utilization) {
    m_current_utilization = current_utilization;
    m_current_utilization_isSet = true;
}

bool OAIWarehouse::is_current_utilization_Set() const{
    return m_current_utilization_isSet;
}

bool OAIWarehouse::is_current_utilization_Valid() const{
    return m_current_utilization_isValid;
}

bool OAIWarehouse::isStatus() const {
    return m_status;
}
void OAIWarehouse::setStatus(const bool &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWarehouse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWarehouse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIWarehouse::getCreatedAt() const {
    return m_created_at;
}
void OAIWarehouse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIWarehouse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIWarehouse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIWarehouse::getUpdatedAt() const {
    return m_updated_at;
}
void OAIWarehouse::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIWarehouse::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIWarehouse::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIWarehouse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_warehouse_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWarehouse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_warehouse_id_isValid && m_name_isValid && m_address_isValid && m_total_capacity_isValid && m_status_isValid && m_created_at_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
