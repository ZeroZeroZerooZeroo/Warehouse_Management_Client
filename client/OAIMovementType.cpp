/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMovementType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMovementType::OAIMovementType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMovementType::OAIMovementType() {
    this->initializeModel();
}

OAIMovementType::~OAIMovementType() {}

void OAIMovementType::initializeModel() {

    m_movement_type_id_isSet = false;
    m_movement_type_id_isValid = false;

    m_movement_type_isSet = false;
    m_movement_type_isValid = false;
}

void OAIMovementType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMovementType::fromJsonObject(QJsonObject json) {

    m_movement_type_id_isValid = ::OpenAPI::fromJsonValue(m_movement_type_id, json[QString("movement_type_id")]);
    m_movement_type_id_isSet = !json[QString("movement_type_id")].isNull() && m_movement_type_id_isValid;

    m_movement_type_isValid = ::OpenAPI::fromJsonValue(m_movement_type, json[QString("movement_type")]);
    m_movement_type_isSet = !json[QString("movement_type")].isNull() && m_movement_type_isValid;
}

QString OAIMovementType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMovementType::asJsonObject() const {
    QJsonObject obj;
    if (m_movement_type_id_isSet) {
        obj.insert(QString("movement_type_id"), ::OpenAPI::toJsonValue(m_movement_type_id));
    }
    if (m_movement_type_isSet) {
        obj.insert(QString("movement_type"), ::OpenAPI::toJsonValue(m_movement_type));
    }
    return obj;
}

qint64 OAIMovementType::getMovementTypeId() const {
    return m_movement_type_id;
}
void OAIMovementType::setMovementTypeId(const qint64 &movement_type_id) {
    m_movement_type_id = movement_type_id;
    m_movement_type_id_isSet = true;
}

bool OAIMovementType::is_movement_type_id_Set() const{
    return m_movement_type_id_isSet;
}

bool OAIMovementType::is_movement_type_id_Valid() const{
    return m_movement_type_id_isValid;
}

QString OAIMovementType::getMovementType() const {
    return m_movement_type;
}
void OAIMovementType::setMovementType(const QString &movement_type) {
    m_movement_type = movement_type;
    m_movement_type_isSet = true;
}

bool OAIMovementType::is_movement_type_Set() const{
    return m_movement_type_isSet;
}

bool OAIMovementType::is_movement_type_Valid() const{
    return m_movement_type_isValid;
}

bool OAIMovementType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_movement_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_movement_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMovementType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_movement_type_id_isValid && m_movement_type_isValid && true;
}

} // namespace OpenAPI
