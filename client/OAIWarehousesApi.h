/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWarehousesApi_H
#define OAI_OAIWarehousesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWarehouse.h"
#include "OAIWarehouseCreate.h"
#include "OAIWarehouseUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWarehousesApi : public QObject {
    Q_OBJECT

public:
    OAIWarehousesApi(const int timeOut = 0);
    ~OAIWarehousesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void warehousesGET();

    /**
    * @param[in]  oai_warehouse_create OAIWarehouseCreate [required]
    */
    virtual void warehousesPOST(const OAIWarehouseCreate &oai_warehouse_create);

    /**
    * @param[in]  warehouse_id qint32 [required]
    */
    virtual void warehousesWarehouseIdDELETE(const qint32 &warehouse_id);

    /**
    * @param[in]  warehouse_id qint32 [required]
    */
    virtual void warehousesWarehouseIdGET(const qint32 &warehouse_id);

    /**
    * @param[in]  warehouse_id qint32 [required]
    * @param[in]  oai_warehouse_update OAIWarehouseUpdate [required]
    */
    virtual void warehousesWarehouseIdPUT(const qint32 &warehouse_id, const OAIWarehouseUpdate &oai_warehouse_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void warehousesGETCallback(OAIHttpRequestWorker *worker);
    void warehousesPOSTCallback(OAIHttpRequestWorker *worker);
    void warehousesWarehouseIdDELETECallback(OAIHttpRequestWorker *worker);
    void warehousesWarehouseIdGETCallback(OAIHttpRequestWorker *worker);
    void warehousesWarehouseIdPUTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void warehousesGETSignal(QList<OAIWarehouse> summary);
    void warehousesPOSTSignal(OAIWarehouse summary);
    void warehousesWarehouseIdDELETESignal();
    void warehousesWarehouseIdGETSignal(OAIWarehouse summary);
    void warehousesWarehouseIdPUTSignal(OAIWarehouse summary);


    void warehousesGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIWarehouse> summary);
    void warehousesPOSTSignalFull(OAIHttpRequestWorker *worker, OAIWarehouse summary);
    void warehousesWarehouseIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void warehousesWarehouseIdGETSignalFull(OAIHttpRequestWorker *worker, OAIWarehouse summary);
    void warehousesWarehouseIdPUTSignalFull(OAIHttpRequestWorker *worker, OAIWarehouse summary);

    Q_DECL_DEPRECATED_X("Use warehousesGETSignalError() instead")
    void warehousesGETSignalE(QList<OAIWarehouse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void warehousesGETSignalError(QList<OAIWarehouse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use warehousesPOSTSignalError() instead")
    void warehousesPOSTSignalE(OAIWarehouse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void warehousesPOSTSignalError(OAIWarehouse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use warehousesWarehouseIdDELETESignalError() instead")
    void warehousesWarehouseIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void warehousesWarehouseIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use warehousesWarehouseIdGETSignalError() instead")
    void warehousesWarehouseIdGETSignalE(OAIWarehouse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void warehousesWarehouseIdGETSignalError(OAIWarehouse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use warehousesWarehouseIdPUTSignalError() instead")
    void warehousesWarehouseIdPUTSignalE(OAIWarehouse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void warehousesWarehouseIdPUTSignalError(OAIWarehouse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use warehousesGETSignalErrorFull() instead")
    void warehousesGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void warehousesGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use warehousesPOSTSignalErrorFull() instead")
    void warehousesPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void warehousesPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use warehousesWarehouseIdDELETESignalErrorFull() instead")
    void warehousesWarehouseIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void warehousesWarehouseIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use warehousesWarehouseIdGETSignalErrorFull() instead")
    void warehousesWarehouseIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void warehousesWarehouseIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use warehousesWarehouseIdPUTSignalErrorFull() instead")
    void warehousesWarehouseIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void warehousesWarehouseIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
