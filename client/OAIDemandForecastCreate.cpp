/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDemandForecastCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDemandForecastCreate::OAIDemandForecastCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDemandForecastCreate::OAIDemandForecastCreate() {
    this->initializeModel();
}

OAIDemandForecastCreate::~OAIDemandForecastCreate() {}

void OAIDemandForecastCreate::initializeModel() {

    m_forecast_date_isSet = false;
    m_forecast_date_isValid = false;

    m_period_start_isSet = false;
    m_period_start_isValid = false;

    m_period_end_isSet = false;
    m_period_end_isValid = false;

    m_predicted_quantity_isSet = false;
    m_predicted_quantity_isValid = false;

    m_record_id_isSet = false;
    m_record_id_isValid = false;
}

void OAIDemandForecastCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDemandForecastCreate::fromJsonObject(QJsonObject json) {

    m_forecast_date_isValid = ::OpenAPI::fromJsonValue(m_forecast_date, json[QString("forecast_date")]);
    m_forecast_date_isSet = !json[QString("forecast_date")].isNull() && m_forecast_date_isValid;

    m_period_start_isValid = ::OpenAPI::fromJsonValue(m_period_start, json[QString("period_start")]);
    m_period_start_isSet = !json[QString("period_start")].isNull() && m_period_start_isValid;

    m_period_end_isValid = ::OpenAPI::fromJsonValue(m_period_end, json[QString("period_end")]);
    m_period_end_isSet = !json[QString("period_end")].isNull() && m_period_end_isValid;

    m_predicted_quantity_isValid = ::OpenAPI::fromJsonValue(m_predicted_quantity, json[QString("predicted_quantity")]);
    m_predicted_quantity_isSet = !json[QString("predicted_quantity")].isNull() && m_predicted_quantity_isValid;

    m_record_id_isValid = ::OpenAPI::fromJsonValue(m_record_id, json[QString("record_id")]);
    m_record_id_isSet = !json[QString("record_id")].isNull() && m_record_id_isValid;
}

QString OAIDemandForecastCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDemandForecastCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_forecast_date_isSet) {
        obj.insert(QString("forecast_date"), ::OpenAPI::toJsonValue(m_forecast_date));
    }
    if (m_period_start_isSet) {
        obj.insert(QString("period_start"), ::OpenAPI::toJsonValue(m_period_start));
    }
    if (m_period_end_isSet) {
        obj.insert(QString("period_end"), ::OpenAPI::toJsonValue(m_period_end));
    }
    if (m_predicted_quantity_isSet) {
        obj.insert(QString("predicted_quantity"), ::OpenAPI::toJsonValue(m_predicted_quantity));
    }
    if (m_record_id_isSet) {
        obj.insert(QString("record_id"), ::OpenAPI::toJsonValue(m_record_id));
    }
    return obj;
}

QDateTime OAIDemandForecastCreate::getForecastDate() const {
    return m_forecast_date;
}
void OAIDemandForecastCreate::setForecastDate(const QDateTime &forecast_date) {
    m_forecast_date = forecast_date;
    m_forecast_date_isSet = true;
}

bool OAIDemandForecastCreate::is_forecast_date_Set() const{
    return m_forecast_date_isSet;
}

bool OAIDemandForecastCreate::is_forecast_date_Valid() const{
    return m_forecast_date_isValid;
}

QDate OAIDemandForecastCreate::getPeriodStart() const {
    return m_period_start;
}
void OAIDemandForecastCreate::setPeriodStart(const QDate &period_start) {
    m_period_start = period_start;
    m_period_start_isSet = true;
}

bool OAIDemandForecastCreate::is_period_start_Set() const{
    return m_period_start_isSet;
}

bool OAIDemandForecastCreate::is_period_start_Valid() const{
    return m_period_start_isValid;
}

QDate OAIDemandForecastCreate::getPeriodEnd() const {
    return m_period_end;
}
void OAIDemandForecastCreate::setPeriodEnd(const QDate &period_end) {
    m_period_end = period_end;
    m_period_end_isSet = true;
}

bool OAIDemandForecastCreate::is_period_end_Set() const{
    return m_period_end_isSet;
}

bool OAIDemandForecastCreate::is_period_end_Valid() const{
    return m_period_end_isValid;
}

double OAIDemandForecastCreate::getPredictedQuantity() const {
    return m_predicted_quantity;
}
void OAIDemandForecastCreate::setPredictedQuantity(const double &predicted_quantity) {
    m_predicted_quantity = predicted_quantity;
    m_predicted_quantity_isSet = true;
}

bool OAIDemandForecastCreate::is_predicted_quantity_Set() const{
    return m_predicted_quantity_isSet;
}

bool OAIDemandForecastCreate::is_predicted_quantity_Valid() const{
    return m_predicted_quantity_isValid;
}

qint64 OAIDemandForecastCreate::getRecordId() const {
    return m_record_id;
}
void OAIDemandForecastCreate::setRecordId(const qint64 &record_id) {
    m_record_id = record_id;
    m_record_id_isSet = true;
}

bool OAIDemandForecastCreate::is_record_id_Set() const{
    return m_record_id_isSet;
}

bool OAIDemandForecastCreate::is_record_id_Valid() const{
    return m_record_id_isValid;
}

bool OAIDemandForecastCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forecast_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predicted_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDemandForecastCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_period_start_isValid && m_period_end_isValid && true;
}

} // namespace OpenAPI
