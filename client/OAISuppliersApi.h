/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISuppliersApi_H
#define OAI_OAISuppliersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISupplier.h"
#include "OAISupplierCreate.h"
#include "OAISupplierUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISuppliersApi : public QObject {
    Q_OBJECT

public:
    OAISuppliersApi(const int timeOut = 0);
    ~OAISuppliersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void suppliersGET();

    /**
    * @param[in]  oai_supplier_create OAISupplierCreate [required]
    */
    virtual void suppliersPOST(const OAISupplierCreate &oai_supplier_create);

    /**
    * @param[in]  supplier_id qint32 [required]
    */
    virtual void suppliersSupplierIdDELETE(const qint32 &supplier_id);

    /**
    * @param[in]  supplier_id qint32 [required]
    */
    virtual void suppliersSupplierIdGET(const qint32 &supplier_id);

    /**
    * @param[in]  supplier_id qint32 [required]
    * @param[in]  oai_supplier_update OAISupplierUpdate [required]
    */
    virtual void suppliersSupplierIdPUT(const qint32 &supplier_id, const OAISupplierUpdate &oai_supplier_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void suppliersGETCallback(OAIHttpRequestWorker *worker);
    void suppliersPOSTCallback(OAIHttpRequestWorker *worker);
    void suppliersSupplierIdDELETECallback(OAIHttpRequestWorker *worker);
    void suppliersSupplierIdGETCallback(OAIHttpRequestWorker *worker);
    void suppliersSupplierIdPUTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void suppliersGETSignal(QList<OAISupplier> summary);
    void suppliersPOSTSignal(OAISupplier summary);
    void suppliersSupplierIdDELETESignal();
    void suppliersSupplierIdGETSignal(OAISupplier summary);
    void suppliersSupplierIdPUTSignal(OAISupplier summary);


    void suppliersGETSignalFull(OAIHttpRequestWorker *worker, QList<OAISupplier> summary);
    void suppliersPOSTSignalFull(OAIHttpRequestWorker *worker, OAISupplier summary);
    void suppliersSupplierIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void suppliersSupplierIdGETSignalFull(OAIHttpRequestWorker *worker, OAISupplier summary);
    void suppliersSupplierIdPUTSignalFull(OAIHttpRequestWorker *worker, OAISupplier summary);

    Q_DECL_DEPRECATED_X("Use suppliersGETSignalError() instead")
    void suppliersGETSignalE(QList<OAISupplier> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersGETSignalError(QList<OAISupplier> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersPOSTSignalError() instead")
    void suppliersPOSTSignalE(OAISupplier summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersPOSTSignalError(OAISupplier summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersSupplierIdDELETESignalError() instead")
    void suppliersSupplierIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersSupplierIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersSupplierIdGETSignalError() instead")
    void suppliersSupplierIdGETSignalE(OAISupplier summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersSupplierIdGETSignalError(OAISupplier summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersSupplierIdPUTSignalError() instead")
    void suppliersSupplierIdPUTSignalE(OAISupplier summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersSupplierIdPUTSignalError(OAISupplier summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use suppliersGETSignalErrorFull() instead")
    void suppliersGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersPOSTSignalErrorFull() instead")
    void suppliersPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersSupplierIdDELETESignalErrorFull() instead")
    void suppliersSupplierIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersSupplierIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersSupplierIdGETSignalErrorFull() instead")
    void suppliersSupplierIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersSupplierIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suppliersSupplierIdPUTSignalErrorFull() instead")
    void suppliersSupplierIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suppliersSupplierIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
