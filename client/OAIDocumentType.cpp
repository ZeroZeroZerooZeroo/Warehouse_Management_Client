/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentType::OAIDocumentType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentType::OAIDocumentType() {
    this->initializeModel();
}

OAIDocumentType::~OAIDocumentType() {}

void OAIDocumentType::initializeModel() {

    m_type_id_isSet = false;
    m_type_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_requires_approval_isSet = false;
    m_requires_approval_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;
}

void OAIDocumentType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentType::fromJsonObject(QJsonObject json) {

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_requires_approval_isValid = ::OpenAPI::fromJsonValue(m_requires_approval, json[QString("requires_approval")]);
    m_requires_approval_isSet = !json[QString("requires_approval")].isNull() && m_requires_approval_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;
}

QString OAIDocumentType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentType::asJsonObject() const {
    QJsonObject obj;
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_requires_approval_isSet) {
        obj.insert(QString("requires_approval"), ::OpenAPI::toJsonValue(m_requires_approval));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    return obj;
}

qint64 OAIDocumentType::getTypeId() const {
    return m_type_id;
}
void OAIDocumentType::setTypeId(const qint64 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIDocumentType::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIDocumentType::is_type_id_Valid() const{
    return m_type_id_isValid;
}

QString OAIDocumentType::getName() const {
    return m_name;
}
void OAIDocumentType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDocumentType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDocumentType::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDocumentType::getPrefix() const {
    return m_prefix;
}
void OAIDocumentType::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIDocumentType::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIDocumentType::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAIDocumentType::isRequiresApproval() const {
    return m_requires_approval;
}
void OAIDocumentType::setRequiresApproval(const bool &requires_approval) {
    m_requires_approval = requires_approval;
    m_requires_approval_isSet = true;
}

bool OAIDocumentType::is_requires_approval_Set() const{
    return m_requires_approval_isSet;
}

bool OAIDocumentType::is_requires_approval_Valid() const{
    return m_requires_approval_isValid;
}

QString OAIDocumentType::getDirection() const {
    return m_direction;
}
void OAIDocumentType::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIDocumentType::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIDocumentType::is_direction_Valid() const{
    return m_direction_isValid;
}

bool OAIDocumentType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_approval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_id_isValid && m_name_isValid && m_direction_isValid && true;
}

} // namespace OpenAPI
