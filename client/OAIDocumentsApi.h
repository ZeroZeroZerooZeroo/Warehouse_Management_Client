/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDocumentsApi_H
#define OAI_OAIDocumentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDocument.h"
#include "OAIDocumentCreate.h"
#include "OAIDocumentItem.h"
#include "OAIDocumentItemCreate.h"
#include "OAIDocumentItemUpdate.h"
#include "OAIDocumentStatus.h"
#include "OAIDocumentStatusCreate.h"
#include "OAIDocumentStatusUpdate.h"
#include "OAIDocumentType.h"
#include "OAIDocumentTypeCreate.h"
#include "OAIDocumentTypeUpdate.h"
#include "OAIDocumentUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDocumentsApi : public QObject {
    Q_OBJECT

public:
    OAIDocumentsApi(const int timeOut = 0);
    ~OAIDocumentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  document_status_id qint32 [required]
    */
    virtual void documentStatusesDocumentStatusIdDELETE(const qint32 &document_status_id);

    /**
    * @param[in]  document_status_id qint32 [required]
    */
    virtual void documentStatusesDocumentStatusIdGET(const qint32 &document_status_id);

    /**
    * @param[in]  document_status_id qint32 [required]
    * @param[in]  oai_document_status_update OAIDocumentStatusUpdate [required]
    */
    virtual void documentStatusesDocumentStatusIdPUT(const qint32 &document_status_id, const OAIDocumentStatusUpdate &oai_document_status_update);


    virtual void documentStatusesGET();

    /**
    * @param[in]  oai_document_status_create OAIDocumentStatusCreate [required]
    */
    virtual void documentStatusesPOST(const OAIDocumentStatusCreate &oai_document_status_create);


    virtual void documentTypesGET();

    /**
    * @param[in]  oai_document_type_create OAIDocumentTypeCreate [required]
    */
    virtual void documentTypesPOST(const OAIDocumentTypeCreate &oai_document_type_create);

    /**
    * @param[in]  type_id qint32 [required]
    */
    virtual void documentTypesTypeIdDELETE(const qint32 &type_id);

    /**
    * @param[in]  type_id qint32 [required]
    */
    virtual void documentTypesTypeIdGET(const qint32 &type_id);

    /**
    * @param[in]  type_id qint32 [required]
    * @param[in]  oai_document_type_update OAIDocumentTypeUpdate [required]
    */
    virtual void documentTypesTypeIdPUT(const qint32 &type_id, const OAIDocumentTypeUpdate &oai_document_type_update);

    /**
    * @param[in]  document_id qint32 [required]
    */
    virtual void documentsDocumentIdDELETE(const qint32 &document_id);

    /**
    * @param[in]  document_id qint32 [required]
    */
    virtual void documentsDocumentIdGET(const qint32 &document_id);

    /**
    * @param[in]  document_id qint32 [required]
    */
    virtual void documentsDocumentIdItemsGET(const qint32 &document_id);

    /**
    * @param[in]  document_id qint32 [required]
    * @param[in]  item_id qint32 [required]
    */
    virtual void documentsDocumentIdItemsItemIdDELETE(const qint32 &document_id, const qint32 &item_id);

    /**
    * @param[in]  document_id qint32 [required]
    * @param[in]  item_id qint32 [required]
    */
    virtual void documentsDocumentIdItemsItemIdGET(const qint32 &document_id, const qint32 &item_id);

    /**
    * @param[in]  document_id qint32 [required]
    * @param[in]  item_id qint32 [required]
    * @param[in]  oai_document_item_update OAIDocumentItemUpdate [required]
    */
    virtual void documentsDocumentIdItemsItemIdPUT(const qint32 &document_id, const qint32 &item_id, const OAIDocumentItemUpdate &oai_document_item_update);

    /**
    * @param[in]  document_id qint32 [required]
    * @param[in]  oai_document_item_create OAIDocumentItemCreate [required]
    */
    virtual void documentsDocumentIdItemsPOST(const qint32 &document_id, const OAIDocumentItemCreate &oai_document_item_create);

    /**
    * @param[in]  document_id qint32 [required]
    * @param[in]  oai_document_update OAIDocumentUpdate [required]
    */
    virtual void documentsDocumentIdPUT(const qint32 &document_id, const OAIDocumentUpdate &oai_document_update);


    virtual void documentsGET();

    /**
    * @param[in]  oai_document_create OAIDocumentCreate [required]
    */
    virtual void documentsPOST(const OAIDocumentCreate &oai_document_create);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void documentStatusesDocumentStatusIdDELETECallback(OAIHttpRequestWorker *worker);
    void documentStatusesDocumentStatusIdGETCallback(OAIHttpRequestWorker *worker);
    void documentStatusesDocumentStatusIdPUTCallback(OAIHttpRequestWorker *worker);
    void documentStatusesGETCallback(OAIHttpRequestWorker *worker);
    void documentStatusesPOSTCallback(OAIHttpRequestWorker *worker);
    void documentTypesGETCallback(OAIHttpRequestWorker *worker);
    void documentTypesPOSTCallback(OAIHttpRequestWorker *worker);
    void documentTypesTypeIdDELETECallback(OAIHttpRequestWorker *worker);
    void documentTypesTypeIdGETCallback(OAIHttpRequestWorker *worker);
    void documentTypesTypeIdPUTCallback(OAIHttpRequestWorker *worker);
    void documentsDocumentIdDELETECallback(OAIHttpRequestWorker *worker);
    void documentsDocumentIdGETCallback(OAIHttpRequestWorker *worker);
    void documentsDocumentIdItemsGETCallback(OAIHttpRequestWorker *worker);
    void documentsDocumentIdItemsItemIdDELETECallback(OAIHttpRequestWorker *worker);
    void documentsDocumentIdItemsItemIdGETCallback(OAIHttpRequestWorker *worker);
    void documentsDocumentIdItemsItemIdPUTCallback(OAIHttpRequestWorker *worker);
    void documentsDocumentIdItemsPOSTCallback(OAIHttpRequestWorker *worker);
    void documentsDocumentIdPUTCallback(OAIHttpRequestWorker *worker);
    void documentsGETCallback(OAIHttpRequestWorker *worker);
    void documentsPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void documentStatusesDocumentStatusIdDELETESignal();
    void documentStatusesDocumentStatusIdGETSignal(OAIDocumentStatus summary);
    void documentStatusesDocumentStatusIdPUTSignal(OAIDocumentStatus summary);
    void documentStatusesGETSignal(QList<OAIDocumentStatus> summary);
    void documentStatusesPOSTSignal(OAIDocumentStatus summary);
    void documentTypesGETSignal(QList<OAIDocumentType> summary);
    void documentTypesPOSTSignal(OAIDocumentType summary);
    void documentTypesTypeIdDELETESignal();
    void documentTypesTypeIdGETSignal(OAIDocumentType summary);
    void documentTypesTypeIdPUTSignal(OAIDocumentType summary);
    void documentsDocumentIdDELETESignal();
    void documentsDocumentIdGETSignal(OAIDocument summary);
    void documentsDocumentIdItemsGETSignal(QList<OAIDocumentItem> summary);
    void documentsDocumentIdItemsItemIdDELETESignal();
    void documentsDocumentIdItemsItemIdGETSignal(OAIDocumentItem summary);
    void documentsDocumentIdItemsItemIdPUTSignal(OAIDocumentItem summary);
    void documentsDocumentIdItemsPOSTSignal(OAIDocumentItem summary);
    void documentsDocumentIdPUTSignal(OAIDocument summary);
    void documentsGETSignal(QList<OAIDocument> summary);
    void documentsPOSTSignal(OAIDocument summary);


    void documentStatusesDocumentStatusIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void documentStatusesDocumentStatusIdGETSignalFull(OAIHttpRequestWorker *worker, OAIDocumentStatus summary);
    void documentStatusesDocumentStatusIdPUTSignalFull(OAIHttpRequestWorker *worker, OAIDocumentStatus summary);
    void documentStatusesGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIDocumentStatus> summary);
    void documentStatusesPOSTSignalFull(OAIHttpRequestWorker *worker, OAIDocumentStatus summary);
    void documentTypesGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIDocumentType> summary);
    void documentTypesPOSTSignalFull(OAIHttpRequestWorker *worker, OAIDocumentType summary);
    void documentTypesTypeIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void documentTypesTypeIdGETSignalFull(OAIHttpRequestWorker *worker, OAIDocumentType summary);
    void documentTypesTypeIdPUTSignalFull(OAIHttpRequestWorker *worker, OAIDocumentType summary);
    void documentsDocumentIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void documentsDocumentIdGETSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void documentsDocumentIdItemsGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIDocumentItem> summary);
    void documentsDocumentIdItemsItemIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void documentsDocumentIdItemsItemIdGETSignalFull(OAIHttpRequestWorker *worker, OAIDocumentItem summary);
    void documentsDocumentIdItemsItemIdPUTSignalFull(OAIHttpRequestWorker *worker, OAIDocumentItem summary);
    void documentsDocumentIdItemsPOSTSignalFull(OAIHttpRequestWorker *worker, OAIDocumentItem summary);
    void documentsDocumentIdPUTSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void documentsGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIDocument> summary);
    void documentsPOSTSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);

    Q_DECL_DEPRECATED_X("Use documentStatusesDocumentStatusIdDELETESignalError() instead")
    void documentStatusesDocumentStatusIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void documentStatusesDocumentStatusIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentStatusesDocumentStatusIdGETSignalError() instead")
    void documentStatusesDocumentStatusIdGETSignalE(OAIDocumentStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentStatusesDocumentStatusIdGETSignalError(OAIDocumentStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentStatusesDocumentStatusIdPUTSignalError() instead")
    void documentStatusesDocumentStatusIdPUTSignalE(OAIDocumentStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentStatusesDocumentStatusIdPUTSignalError(OAIDocumentStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentStatusesGETSignalError() instead")
    void documentStatusesGETSignalE(QList<OAIDocumentStatus> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentStatusesGETSignalError(QList<OAIDocumentStatus> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentStatusesPOSTSignalError() instead")
    void documentStatusesPOSTSignalE(OAIDocumentStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentStatusesPOSTSignalError(OAIDocumentStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentTypesGETSignalError() instead")
    void documentTypesGETSignalE(QList<OAIDocumentType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentTypesGETSignalError(QList<OAIDocumentType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentTypesPOSTSignalError() instead")
    void documentTypesPOSTSignalE(OAIDocumentType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentTypesPOSTSignalError(OAIDocumentType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentTypesTypeIdDELETESignalError() instead")
    void documentTypesTypeIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void documentTypesTypeIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentTypesTypeIdGETSignalError() instead")
    void documentTypesTypeIdGETSignalE(OAIDocumentType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentTypesTypeIdGETSignalError(OAIDocumentType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentTypesTypeIdPUTSignalError() instead")
    void documentTypesTypeIdPUTSignalE(OAIDocumentType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentTypesTypeIdPUTSignalError(OAIDocumentType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdDELETESignalError() instead")
    void documentsDocumentIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdGETSignalError() instead")
    void documentsDocumentIdGETSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdGETSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdItemsGETSignalError() instead")
    void documentsDocumentIdItemsGETSignalE(QList<OAIDocumentItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdItemsGETSignalError(QList<OAIDocumentItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdItemsItemIdDELETESignalError() instead")
    void documentsDocumentIdItemsItemIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdItemsItemIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdItemsItemIdGETSignalError() instead")
    void documentsDocumentIdItemsItemIdGETSignalE(OAIDocumentItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdItemsItemIdGETSignalError(OAIDocumentItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdItemsItemIdPUTSignalError() instead")
    void documentsDocumentIdItemsItemIdPUTSignalE(OAIDocumentItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdItemsItemIdPUTSignalError(OAIDocumentItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdItemsPOSTSignalError() instead")
    void documentsDocumentIdItemsPOSTSignalE(OAIDocumentItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdItemsPOSTSignalError(OAIDocumentItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdPUTSignalError() instead")
    void documentsDocumentIdPUTSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdPUTSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsGETSignalError() instead")
    void documentsGETSignalE(QList<OAIDocument> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsGETSignalError(QList<OAIDocument> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsPOSTSignalError() instead")
    void documentsPOSTSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsPOSTSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use documentStatusesDocumentStatusIdDELETESignalErrorFull() instead")
    void documentStatusesDocumentStatusIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentStatusesDocumentStatusIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentStatusesDocumentStatusIdGETSignalErrorFull() instead")
    void documentStatusesDocumentStatusIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentStatusesDocumentStatusIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentStatusesDocumentStatusIdPUTSignalErrorFull() instead")
    void documentStatusesDocumentStatusIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentStatusesDocumentStatusIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentStatusesGETSignalErrorFull() instead")
    void documentStatusesGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentStatusesGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentStatusesPOSTSignalErrorFull() instead")
    void documentStatusesPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentStatusesPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentTypesGETSignalErrorFull() instead")
    void documentTypesGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentTypesGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentTypesPOSTSignalErrorFull() instead")
    void documentTypesPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentTypesPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentTypesTypeIdDELETESignalErrorFull() instead")
    void documentTypesTypeIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentTypesTypeIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentTypesTypeIdGETSignalErrorFull() instead")
    void documentTypesTypeIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentTypesTypeIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentTypesTypeIdPUTSignalErrorFull() instead")
    void documentTypesTypeIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentTypesTypeIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdDELETESignalErrorFull() instead")
    void documentsDocumentIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdGETSignalErrorFull() instead")
    void documentsDocumentIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdItemsGETSignalErrorFull() instead")
    void documentsDocumentIdItemsGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdItemsGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdItemsItemIdDELETESignalErrorFull() instead")
    void documentsDocumentIdItemsItemIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdItemsItemIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdItemsItemIdGETSignalErrorFull() instead")
    void documentsDocumentIdItemsItemIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdItemsItemIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdItemsItemIdPUTSignalErrorFull() instead")
    void documentsDocumentIdItemsItemIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdItemsItemIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdItemsPOSTSignalErrorFull() instead")
    void documentsDocumentIdItemsPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdItemsPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsDocumentIdPUTSignalErrorFull() instead")
    void documentsDocumentIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsDocumentIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsGETSignalErrorFull() instead")
    void documentsGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use documentsPOSTSignalErrorFull() instead")
    void documentsPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void documentsPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
