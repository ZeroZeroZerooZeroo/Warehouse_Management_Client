/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInventoryUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInventoryUpdate::OAIInventoryUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInventoryUpdate::OAIInventoryUpdate() {
    this->initializeModel();
}

OAIInventoryUpdate::~OAIInventoryUpdate() {}

void OAIInventoryUpdate::initializeModel() {

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reserved_quantity_isSet = false;
    m_reserved_quantity_isValid = false;

    m_storage_location_isSet = false;
    m_storage_location_isValid = false;

    m_batch_number_isSet = false;
    m_batch_number_isValid = false;
}

void OAIInventoryUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInventoryUpdate::fromJsonObject(QJsonObject json) {

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reserved_quantity_isValid = ::OpenAPI::fromJsonValue(m_reserved_quantity, json[QString("reserved_quantity")]);
    m_reserved_quantity_isSet = !json[QString("reserved_quantity")].isNull() && m_reserved_quantity_isValid;

    m_storage_location_isValid = ::OpenAPI::fromJsonValue(m_storage_location, json[QString("storage_location")]);
    m_storage_location_isSet = !json[QString("storage_location")].isNull() && m_storage_location_isValid;

    m_batch_number_isValid = ::OpenAPI::fromJsonValue(m_batch_number, json[QString("batch_number")]);
    m_batch_number_isSet = !json[QString("batch_number")].isNull() && m_batch_number_isValid;
}

QString OAIInventoryUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInventoryUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reserved_quantity_isSet) {
        obj.insert(QString("reserved_quantity"), ::OpenAPI::toJsonValue(m_reserved_quantity));
    }
    if (m_storage_location_isSet) {
        obj.insert(QString("storage_location"), ::OpenAPI::toJsonValue(m_storage_location));
    }
    if (m_batch_number_isSet) {
        obj.insert(QString("batch_number"), ::OpenAPI::toJsonValue(m_batch_number));
    }
    return obj;
}

double OAIInventoryUpdate::getQuantity() const {
    return m_quantity;
}
void OAIInventoryUpdate::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIInventoryUpdate::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIInventoryUpdate::is_quantity_Valid() const{
    return m_quantity_isValid;
}

double OAIInventoryUpdate::getReservedQuantity() const {
    return m_reserved_quantity;
}
void OAIInventoryUpdate::setReservedQuantity(const double &reserved_quantity) {
    m_reserved_quantity = reserved_quantity;
    m_reserved_quantity_isSet = true;
}

bool OAIInventoryUpdate::is_reserved_quantity_Set() const{
    return m_reserved_quantity_isSet;
}

bool OAIInventoryUpdate::is_reserved_quantity_Valid() const{
    return m_reserved_quantity_isValid;
}

QString OAIInventoryUpdate::getStorageLocation() const {
    return m_storage_location;
}
void OAIInventoryUpdate::setStorageLocation(const QString &storage_location) {
    m_storage_location = storage_location;
    m_storage_location_isSet = true;
}

bool OAIInventoryUpdate::is_storage_location_Set() const{
    return m_storage_location_isSet;
}

bool OAIInventoryUpdate::is_storage_location_Valid() const{
    return m_storage_location_isValid;
}

QString OAIInventoryUpdate::getBatchNumber() const {
    return m_batch_number;
}
void OAIInventoryUpdate::setBatchNumber(const QString &batch_number) {
    m_batch_number = batch_number;
    m_batch_number_isSet = true;
}

bool OAIInventoryUpdate::is_batch_number_Set() const{
    return m_batch_number_isSet;
}

bool OAIInventoryUpdate::is_batch_number_Valid() const{
    return m_batch_number_isValid;
}

bool OAIInventoryUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInventoryUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
