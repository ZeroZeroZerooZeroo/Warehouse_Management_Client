/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentCreate::OAIDocumentCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentCreate::OAIDocumentCreate() {
    this->initializeModel();
}

OAIDocumentCreate::~OAIDocumentCreate() {}

void OAIDocumentCreate::initializeModel() {

    m_type_id_isSet = false;
    m_type_id_isValid = false;

    m_document_status_id_isSet = false;
    m_document_status_id_isValid = false;

    m_document_number_isSet = false;
    m_document_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_movement_id_isSet = false;
    m_movement_id_isValid = false;

    m_movement_type_id_isSet = false;
    m_movement_type_id_isValid = false;
}

void OAIDocumentCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentCreate::fromJsonObject(QJsonObject json) {

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;

    m_document_status_id_isValid = ::OpenAPI::fromJsonValue(m_document_status_id, json[QString("document_status_id")]);
    m_document_status_id_isSet = !json[QString("document_status_id")].isNull() && m_document_status_id_isValid;

    m_document_number_isValid = ::OpenAPI::fromJsonValue(m_document_number, json[QString("document_number")]);
    m_document_number_isSet = !json[QString("document_number")].isNull() && m_document_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("item_id")]);
    m_item_id_isSet = !json[QString("item_id")].isNull() && m_item_id_isValid;

    m_movement_id_isValid = ::OpenAPI::fromJsonValue(m_movement_id, json[QString("movement_id")]);
    m_movement_id_isSet = !json[QString("movement_id")].isNull() && m_movement_id_isValid;

    m_movement_type_id_isValid = ::OpenAPI::fromJsonValue(m_movement_type_id, json[QString("movement_type_id")]);
    m_movement_type_id_isSet = !json[QString("movement_type_id")].isNull() && m_movement_type_id_isValid;
}

QString OAIDocumentCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    if (m_document_status_id_isSet) {
        obj.insert(QString("document_status_id"), ::OpenAPI::toJsonValue(m_document_status_id));
    }
    if (m_document_number_isSet) {
        obj.insert(QString("document_number"), ::OpenAPI::toJsonValue(m_document_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("item_id"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_movement_id_isSet) {
        obj.insert(QString("movement_id"), ::OpenAPI::toJsonValue(m_movement_id));
    }
    if (m_movement_type_id_isSet) {
        obj.insert(QString("movement_type_id"), ::OpenAPI::toJsonValue(m_movement_type_id));
    }
    return obj;
}

qint64 OAIDocumentCreate::getTypeId() const {
    return m_type_id;
}
void OAIDocumentCreate::setTypeId(const qint64 &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIDocumentCreate::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIDocumentCreate::is_type_id_Valid() const{
    return m_type_id_isValid;
}

qint64 OAIDocumentCreate::getDocumentStatusId() const {
    return m_document_status_id;
}
void OAIDocumentCreate::setDocumentStatusId(const qint64 &document_status_id) {
    m_document_status_id = document_status_id;
    m_document_status_id_isSet = true;
}

bool OAIDocumentCreate::is_document_status_id_Set() const{
    return m_document_status_id_isSet;
}

bool OAIDocumentCreate::is_document_status_id_Valid() const{
    return m_document_status_id_isValid;
}

QString OAIDocumentCreate::getDocumentNumber() const {
    return m_document_number;
}
void OAIDocumentCreate::setDocumentNumber(const QString &document_number) {
    m_document_number = document_number;
    m_document_number_isSet = true;
}

bool OAIDocumentCreate::is_document_number_Set() const{
    return m_document_number_isSet;
}

bool OAIDocumentCreate::is_document_number_Valid() const{
    return m_document_number_isValid;
}

QString OAIDocumentCreate::getStatus() const {
    return m_status;
}
void OAIDocumentCreate::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDocumentCreate::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDocumentCreate::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDocumentCreate::getComments() const {
    return m_comments;
}
void OAIDocumentCreate::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIDocumentCreate::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIDocumentCreate::is_comments_Valid() const{
    return m_comments_isValid;
}

qint64 OAIDocumentCreate::getCustomerId() const {
    return m_customer_id;
}
void OAIDocumentCreate::setCustomerId(const qint64 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIDocumentCreate::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIDocumentCreate::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

qint64 OAIDocumentCreate::getItemId() const {
    return m_item_id;
}
void OAIDocumentCreate::setItemId(const qint64 &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIDocumentCreate::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIDocumentCreate::is_item_id_Valid() const{
    return m_item_id_isValid;
}

qint64 OAIDocumentCreate::getMovementId() const {
    return m_movement_id;
}
void OAIDocumentCreate::setMovementId(const qint64 &movement_id) {
    m_movement_id = movement_id;
    m_movement_id_isSet = true;
}

bool OAIDocumentCreate::is_movement_id_Set() const{
    return m_movement_id_isSet;
}

bool OAIDocumentCreate::is_movement_id_Valid() const{
    return m_movement_id_isValid;
}

qint64 OAIDocumentCreate::getMovementTypeId() const {
    return m_movement_type_id;
}
void OAIDocumentCreate::setMovementTypeId(const qint64 &movement_type_id) {
    m_movement_type_id = movement_type_id;
    m_movement_type_id_isSet = true;
}

bool OAIDocumentCreate::is_movement_type_id_Set() const{
    return m_movement_type_id_isSet;
}

bool OAIDocumentCreate::is_movement_type_id_Valid() const{
    return m_movement_type_id_isValid;
}

bool OAIDocumentCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_status_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_movement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_movement_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_id_isValid && m_document_status_id_isValid && m_document_number_isValid && m_status_isValid && m_customer_id_isValid && true;
}

} // namespace OpenAPI
