/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationCreate::OAINotificationCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationCreate::OAINotificationCreate() {
    this->initializeModel();
}

OAINotificationCreate::~OAINotificationCreate() {}

void OAINotificationCreate::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_is_read_isSet = false;
    m_is_read_isValid = false;
}

void OAINotificationCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationCreate::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_is_read_isValid = ::OpenAPI::fromJsonValue(m_is_read, json[QString("is_read")]);
    m_is_read_isSet = !json[QString("is_read")].isNull() && m_is_read_isValid;
}

QString OAINotificationCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_is_read_isSet) {
        obj.insert(QString("is_read"), ::OpenAPI::toJsonValue(m_is_read));
    }
    return obj;
}

QString OAINotificationCreate::getTitle() const {
    return m_title;
}
void OAINotificationCreate::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAINotificationCreate::is_title_Set() const{
    return m_title_isSet;
}

bool OAINotificationCreate::is_title_Valid() const{
    return m_title_isValid;
}

QString OAINotificationCreate::getMessage() const {
    return m_message;
}
void OAINotificationCreate::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAINotificationCreate::is_message_Set() const{
    return m_message_isSet;
}

bool OAINotificationCreate::is_message_Valid() const{
    return m_message_isValid;
}

bool OAINotificationCreate::isIsRead() const {
    return m_is_read;
}
void OAINotificationCreate::setIsRead(const bool &is_read) {
    m_is_read = is_read;
    m_is_read_isSet = true;
}

bool OAINotificationCreate::is_is_read_Set() const{
    return m_is_read_isSet;
}

bool OAINotificationCreate::is_is_read_Valid() const{
    return m_is_read_isValid;
}

bool OAINotificationCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_read_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_title_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
