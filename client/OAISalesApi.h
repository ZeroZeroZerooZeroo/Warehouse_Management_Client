/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISalesApi_H
#define OAI_OAISalesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISalesHistory.h"
#include "OAISalesHistoryCreate.h"
#include "OAISalesHistoryUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISalesApi : public QObject {
    Q_OBJECT

public:
    OAISalesApi(const int timeOut = 0);
    ~OAISalesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void salesGET();

    /**
    * @param[in]  oai_sales_history_create OAISalesHistoryCreate [required]
    */
    virtual void salesPOST(const OAISalesHistoryCreate &oai_sales_history_create);

    /**
    * @param[in]  record_id qint32 [required]
    */
    virtual void salesRecordIdDELETE(const qint32 &record_id);

    /**
    * @param[in]  record_id qint32 [required]
    */
    virtual void salesRecordIdGET(const qint32 &record_id);

    /**
    * @param[in]  record_id qint32 [required]
    * @param[in]  oai_sales_history_update OAISalesHistoryUpdate [required]
    */
    virtual void salesRecordIdPUT(const qint32 &record_id, const OAISalesHistoryUpdate &oai_sales_history_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void salesGETCallback(OAIHttpRequestWorker *worker);
    void salesPOSTCallback(OAIHttpRequestWorker *worker);
    void salesRecordIdDELETECallback(OAIHttpRequestWorker *worker);
    void salesRecordIdGETCallback(OAIHttpRequestWorker *worker);
    void salesRecordIdPUTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void salesGETSignal(QList<OAISalesHistory> summary);
    void salesPOSTSignal(OAISalesHistory summary);
    void salesRecordIdDELETESignal();
    void salesRecordIdGETSignal(OAISalesHistory summary);
    void salesRecordIdPUTSignal(OAISalesHistory summary);


    void salesGETSignalFull(OAIHttpRequestWorker *worker, QList<OAISalesHistory> summary);
    void salesPOSTSignalFull(OAIHttpRequestWorker *worker, OAISalesHistory summary);
    void salesRecordIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void salesRecordIdGETSignalFull(OAIHttpRequestWorker *worker, OAISalesHistory summary);
    void salesRecordIdPUTSignalFull(OAIHttpRequestWorker *worker, OAISalesHistory summary);

    Q_DECL_DEPRECATED_X("Use salesGETSignalError() instead")
    void salesGETSignalE(QList<OAISalesHistory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesGETSignalError(QList<OAISalesHistory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesPOSTSignalError() instead")
    void salesPOSTSignalE(OAISalesHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesPOSTSignalError(OAISalesHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesRecordIdDELETESignalError() instead")
    void salesRecordIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void salesRecordIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesRecordIdGETSignalError() instead")
    void salesRecordIdGETSignalE(OAISalesHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesRecordIdGETSignalError(OAISalesHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesRecordIdPUTSignalError() instead")
    void salesRecordIdPUTSignalE(OAISalesHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void salesRecordIdPUTSignalError(OAISalesHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use salesGETSignalErrorFull() instead")
    void salesGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesPOSTSignalErrorFull() instead")
    void salesPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesRecordIdDELETESignalErrorFull() instead")
    void salesRecordIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesRecordIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesRecordIdGETSignalErrorFull() instead")
    void salesRecordIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesRecordIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use salesRecordIdPUTSignalErrorFull() instead")
    void salesRecordIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void salesRecordIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
