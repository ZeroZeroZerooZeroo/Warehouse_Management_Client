/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForecastNNRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForecastNNRequest::OAIForecastNNRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForecastNNRequest::OAIForecastNNRequest() {
    this->initializeModel();
}

OAIForecastNNRequest::~OAIForecastNNRequest() {}

void OAIForecastNNRequest::initializeModel() {

    m_model_type_isSet = false;
    m_model_type_isValid = false;

    m_forecasts_type_id_isSet = false;
    m_forecasts_type_id_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_period_start_isSet = false;
    m_period_start_isValid = false;

    m_period_end_isSet = false;
    m_period_end_isValid = false;
}

void OAIForecastNNRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForecastNNRequest::fromJsonObject(QJsonObject json) {

    m_model_type_isValid = ::OpenAPI::fromJsonValue(m_model_type, json[QString("model_type")]);
    m_model_type_isSet = !json[QString("model_type")].isNull() && m_model_type_isValid;

    m_forecasts_type_id_isValid = ::OpenAPI::fromJsonValue(m_forecasts_type_id, json[QString("forecasts_type_id")]);
    m_forecasts_type_id_isSet = !json[QString("forecasts_type_id")].isNull() && m_forecasts_type_id_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_period_start_isValid = ::OpenAPI::fromJsonValue(m_period_start, json[QString("period_start")]);
    m_period_start_isSet = !json[QString("period_start")].isNull() && m_period_start_isValid;

    m_period_end_isValid = ::OpenAPI::fromJsonValue(m_period_end, json[QString("period_end")]);
    m_period_end_isSet = !json[QString("period_end")].isNull() && m_period_end_isValid;
}

QString OAIForecastNNRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForecastNNRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_model_type_isSet) {
        obj.insert(QString("model_type"), ::OpenAPI::toJsonValue(m_model_type));
    }
    if (m_forecasts_type_id_isSet) {
        obj.insert(QString("forecasts_type_id"), ::OpenAPI::toJsonValue(m_forecasts_type_id));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_period_start_isSet) {
        obj.insert(QString("period_start"), ::OpenAPI::toJsonValue(m_period_start));
    }
    if (m_period_end_isSet) {
        obj.insert(QString("period_end"), ::OpenAPI::toJsonValue(m_period_end));
    }
    return obj;
}

QString OAIForecastNNRequest::getModelType() const {
    return m_model_type;
}
void OAIForecastNNRequest::setModelType(const QString &model_type) {
    m_model_type = model_type;
    m_model_type_isSet = true;
}

bool OAIForecastNNRequest::is_model_type_Set() const{
    return m_model_type_isSet;
}

bool OAIForecastNNRequest::is_model_type_Valid() const{
    return m_model_type_isValid;
}

qint32 OAIForecastNNRequest::getForecastsTypeId() const {
    return m_forecasts_type_id;
}
void OAIForecastNNRequest::setForecastsTypeId(const qint32 &forecasts_type_id) {
    m_forecasts_type_id = forecasts_type_id;
    m_forecasts_type_id_isSet = true;
}

bool OAIForecastNNRequest::is_forecasts_type_id_Set() const{
    return m_forecasts_type_id_isSet;
}

bool OAIForecastNNRequest::is_forecasts_type_id_Valid() const{
    return m_forecasts_type_id_isValid;
}

QList<OAIProductRef> OAIForecastNNRequest::getProducts() const {
    return m_products;
}
void OAIForecastNNRequest::setProducts(const QList<OAIProductRef> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIForecastNNRequest::is_products_Set() const{
    return m_products_isSet;
}

bool OAIForecastNNRequest::is_products_Valid() const{
    return m_products_isValid;
}

QDate OAIForecastNNRequest::getPeriodStart() const {
    return m_period_start;
}
void OAIForecastNNRequest::setPeriodStart(const QDate &period_start) {
    m_period_start = period_start;
    m_period_start_isSet = true;
}

bool OAIForecastNNRequest::is_period_start_Set() const{
    return m_period_start_isSet;
}

bool OAIForecastNNRequest::is_period_start_Valid() const{
    return m_period_start_isValid;
}

QDate OAIForecastNNRequest::getPeriodEnd() const {
    return m_period_end;
}
void OAIForecastNNRequest::setPeriodEnd(const QDate &period_end) {
    m_period_end = period_end;
    m_period_end_isSet = true;
}

bool OAIForecastNNRequest::is_period_end_Set() const{
    return m_period_end_isSet;
}

bool OAIForecastNNRequest::is_period_end_Valid() const{
    return m_period_end_isValid;
}

bool OAIForecastNNRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecasts_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForecastNNRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
