/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomersApi_H
#define OAI_OAICustomersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomer.h"
#include "OAICustomerCreate.h"
#include "OAICustomerUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomersApi : public QObject {
    Q_OBJECT

public:
    OAICustomersApi(const int timeOut = 0);
    ~OAICustomersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  customer_id qint32 [required]
    */
    virtual void customersCustomerIdDELETE(const qint32 &customer_id);

    /**
    * @param[in]  customer_id qint32 [required]
    */
    virtual void customersCustomerIdGET(const qint32 &customer_id);

    /**
    * @param[in]  customer_id qint32 [required]
    * @param[in]  oai_customer_update OAICustomerUpdate [required]
    */
    virtual void customersCustomerIdPUT(const qint32 &customer_id, const OAICustomerUpdate &oai_customer_update);


    virtual void customersGET();

    /**
    * @param[in]  oai_customer_create OAICustomerCreate [required]
    */
    virtual void customersPOST(const OAICustomerCreate &oai_customer_create);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void customersCustomerIdDELETECallback(OAIHttpRequestWorker *worker);
    void customersCustomerIdGETCallback(OAIHttpRequestWorker *worker);
    void customersCustomerIdPUTCallback(OAIHttpRequestWorker *worker);
    void customersGETCallback(OAIHttpRequestWorker *worker);
    void customersPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void customersCustomerIdDELETESignal();
    void customersCustomerIdGETSignal(OAICustomer summary);
    void customersCustomerIdPUTSignal(OAICustomer summary);
    void customersGETSignal(QList<OAICustomer> summary);
    void customersPOSTSignal(OAICustomer summary);


    void customersCustomerIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void customersCustomerIdGETSignalFull(OAIHttpRequestWorker *worker, OAICustomer summary);
    void customersCustomerIdPUTSignalFull(OAIHttpRequestWorker *worker, OAICustomer summary);
    void customersGETSignalFull(OAIHttpRequestWorker *worker, QList<OAICustomer> summary);
    void customersPOSTSignalFull(OAIHttpRequestWorker *worker, OAICustomer summary);

    Q_DECL_DEPRECATED_X("Use customersCustomerIdDELETESignalError() instead")
    void customersCustomerIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void customersCustomerIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersCustomerIdGETSignalError() instead")
    void customersCustomerIdGETSignalE(OAICustomer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersCustomerIdGETSignalError(OAICustomer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersCustomerIdPUTSignalError() instead")
    void customersCustomerIdPUTSignalE(OAICustomer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersCustomerIdPUTSignalError(OAICustomer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGETSignalError() instead")
    void customersGETSignalE(QList<OAICustomer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGETSignalError(QList<OAICustomer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersPOSTSignalError() instead")
    void customersPOSTSignalE(OAICustomer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customersPOSTSignalError(OAICustomer summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use customersCustomerIdDELETESignalErrorFull() instead")
    void customersCustomerIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersCustomerIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersCustomerIdGETSignalErrorFull() instead")
    void customersCustomerIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersCustomerIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersCustomerIdPUTSignalErrorFull() instead")
    void customersCustomerIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersCustomerIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersGETSignalErrorFull() instead")
    void customersGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customersPOSTSignalErrorFull() instead")
    void customersPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customersPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
