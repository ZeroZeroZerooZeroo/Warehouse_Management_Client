/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationsApi_H
#define OAI_OAINotificationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINotification.h"
#include "OAINotificationCreate.h"
#include "OAINotificationUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationsApi : public QObject {
    Q_OBJECT

public:
    OAINotificationsApi(const int timeOut = 0);
    ~OAINotificationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void notificationsGET();

    /**
    * @param[in]  notification_id qint32 [required]
    */
    virtual void notificationsNotificationIdDELETE(const qint32 &notification_id);

    /**
    * @param[in]  notification_id qint32 [required]
    */
    virtual void notificationsNotificationIdGET(const qint32 &notification_id);

    /**
    * @param[in]  notification_id qint32 [required]
    * @param[in]  oai_notification_update OAINotificationUpdate [required]
    */
    virtual void notificationsNotificationIdPUT(const qint32 &notification_id, const OAINotificationUpdate &oai_notification_update);

    /**
    * @param[in]  oai_notification_create OAINotificationCreate [required]
    */
    virtual void notificationsPOST(const OAINotificationCreate &oai_notification_create);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void notificationsGETCallback(OAIHttpRequestWorker *worker);
    void notificationsNotificationIdDELETECallback(OAIHttpRequestWorker *worker);
    void notificationsNotificationIdGETCallback(OAIHttpRequestWorker *worker);
    void notificationsNotificationIdPUTCallback(OAIHttpRequestWorker *worker);
    void notificationsPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void notificationsGETSignal(QList<OAINotification> summary);
    void notificationsNotificationIdDELETESignal();
    void notificationsNotificationIdGETSignal(OAINotification summary);
    void notificationsNotificationIdPUTSignal(OAINotification summary);
    void notificationsPOSTSignal(OAINotification summary);


    void notificationsGETSignalFull(OAIHttpRequestWorker *worker, QList<OAINotification> summary);
    void notificationsNotificationIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void notificationsNotificationIdGETSignalFull(OAIHttpRequestWorker *worker, OAINotification summary);
    void notificationsNotificationIdPUTSignalFull(OAIHttpRequestWorker *worker, OAINotification summary);
    void notificationsPOSTSignalFull(OAIHttpRequestWorker *worker, OAINotification summary);

    Q_DECL_DEPRECATED_X("Use notificationsGETSignalError() instead")
    void notificationsGETSignalE(QList<OAINotification> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsGETSignalError(QList<OAINotification> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsNotificationIdDELETESignalError() instead")
    void notificationsNotificationIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsNotificationIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsNotificationIdGETSignalError() instead")
    void notificationsNotificationIdGETSignalE(OAINotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsNotificationIdGETSignalError(OAINotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsNotificationIdPUTSignalError() instead")
    void notificationsNotificationIdPUTSignalE(OAINotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsNotificationIdPUTSignalError(OAINotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsPOSTSignalError() instead")
    void notificationsPOSTSignalE(OAINotification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsPOSTSignalError(OAINotification summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use notificationsGETSignalErrorFull() instead")
    void notificationsGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsNotificationIdDELETESignalErrorFull() instead")
    void notificationsNotificationIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsNotificationIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsNotificationIdGETSignalErrorFull() instead")
    void notificationsNotificationIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsNotificationIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsNotificationIdPUTSignalErrorFull() instead")
    void notificationsNotificationIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsNotificationIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsPOSTSignalErrorFull() instead")
    void notificationsPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
