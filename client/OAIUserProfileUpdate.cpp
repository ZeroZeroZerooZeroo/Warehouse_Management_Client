/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserProfileUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserProfileUpdate::OAIUserProfileUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserProfileUpdate::OAIUserProfileUpdate() {
    this->initializeModel();
}

OAIUserProfileUpdate::~OAIUserProfileUpdate() {}

void OAIUserProfileUpdate::initializeModel() {

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_birth_date_isSet = false;
    m_birth_date_isValid = false;

    m_avatar_path_isSet = false;
    m_avatar_path_isValid = false;
}

void OAIUserProfileUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserProfileUpdate::fromJsonObject(QJsonObject json) {

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_birth_date_isValid = ::OpenAPI::fromJsonValue(m_birth_date, json[QString("birth_date")]);
    m_birth_date_isSet = !json[QString("birth_date")].isNull() && m_birth_date_isValid;

    m_avatar_path_isValid = ::OpenAPI::fromJsonValue(m_avatar_path, json[QString("avatar_path")]);
    m_avatar_path_isSet = !json[QString("avatar_path")].isNull() && m_avatar_path_isValid;
}

QString OAIUserProfileUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserProfileUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_department_isSet) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_birth_date_isSet) {
        obj.insert(QString("birth_date"), ::OpenAPI::toJsonValue(m_birth_date));
    }
    if (m_avatar_path_isSet) {
        obj.insert(QString("avatar_path"), ::OpenAPI::toJsonValue(m_avatar_path));
    }
    return obj;
}

QString OAIUserProfileUpdate::getFullName() const {
    return m_full_name;
}
void OAIUserProfileUpdate::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIUserProfileUpdate::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIUserProfileUpdate::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIUserProfileUpdate::getPhone() const {
    return m_phone;
}
void OAIUserProfileUpdate::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIUserProfileUpdate::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIUserProfileUpdate::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIUserProfileUpdate::getPosition() const {
    return m_position;
}
void OAIUserProfileUpdate::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIUserProfileUpdate::is_position_Set() const{
    return m_position_isSet;
}

bool OAIUserProfileUpdate::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIUserProfileUpdate::getDepartment() const {
    return m_department;
}
void OAIUserProfileUpdate::setDepartment(const QString &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAIUserProfileUpdate::is_department_Set() const{
    return m_department_isSet;
}

bool OAIUserProfileUpdate::is_department_Valid() const{
    return m_department_isValid;
}

QDate OAIUserProfileUpdate::getBirthDate() const {
    return m_birth_date;
}
void OAIUserProfileUpdate::setBirthDate(const QDate &birth_date) {
    m_birth_date = birth_date;
    m_birth_date_isSet = true;
}

bool OAIUserProfileUpdate::is_birth_date_Set() const{
    return m_birth_date_isSet;
}

bool OAIUserProfileUpdate::is_birth_date_Valid() const{
    return m_birth_date_isValid;
}

QString OAIUserProfileUpdate::getAvatarPath() const {
    return m_avatar_path;
}
void OAIUserProfileUpdate::setAvatarPath(const QString &avatar_path) {
    m_avatar_path = avatar_path;
    m_avatar_path_isSet = true;
}

bool OAIUserProfileUpdate::is_avatar_path_Set() const{
    return m_avatar_path_isSet;
}

bool OAIUserProfileUpdate::is_avatar_path_Valid() const{
    return m_avatar_path_isValid;
}

bool OAIUserProfileUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserProfileUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
