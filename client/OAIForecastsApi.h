/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIForecastsApi_H
#define OAI_OAIForecastsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDemandForecast.h"
#include "OAIDemandForecastCreate.h"
#include "OAIDemandForecastUpdate.h"
#include "OAIForecastNNRequest.h"
#include "OAIForecastsType.h"
#include "OAIForecastsTypeCreate.h"
#include "OAIForecastsTypeUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIForecastsApi : public QObject {
    Q_OBJECT

public:
    OAIForecastsApi(const int timeOut = 0);
    ~OAIForecastsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  forecast_id qint32 [required]
    */
    virtual void forecastsForecastIdDELETE(const qint32 &forecast_id);

    /**
    * @param[in]  forecast_id qint32 [required]
    */
    virtual void forecastsForecastIdGET(const qint32 &forecast_id);

    /**
    * @param[in]  forecast_id qint32 [required]
    * @param[in]  oai_demand_forecast_update OAIDemandForecastUpdate [required]
    */
    virtual void forecastsForecastIdPUT(const qint32 &forecast_id, const OAIDemandForecastUpdate &oai_demand_forecast_update);


    virtual void forecastsGET();

    /**
    * @param[in]  oai_demand_forecast_create OAIDemandForecastCreate [required]
    */
    virtual void forecastsPOST(const OAIDemandForecastCreate &oai_demand_forecast_create);

    /**
    * @param[in]  forecasts_type_id qint32 [required]
    */
    virtual void forecastsTypesForecastsTypeIdDELETE(const qint32 &forecasts_type_id);

    /**
    * @param[in]  forecasts_type_id qint32 [required]
    */
    virtual void forecastsTypesForecastsTypeIdGET(const qint32 &forecasts_type_id);

    /**
    * @param[in]  forecasts_type_id qint32 [required]
    * @param[in]  oai_forecasts_type_update OAIForecastsTypeUpdate [required]
    */
    virtual void forecastsTypesForecastsTypeIdPUT(const qint32 &forecasts_type_id, const OAIForecastsTypeUpdate &oai_forecasts_type_update);


    virtual void forecastsTypesGET();

    /**
    * @param[in]  oai_forecasts_type_create OAIForecastsTypeCreate [required]
    */
    virtual void forecastsTypesPOST(const OAIForecastsTypeCreate &oai_forecasts_type_create);

    /**
    * @param[in]  oai_forecast_nn_request OAIForecastNNRequest [required]
    */
    virtual void generateDemandForecast(const OAIForecastNNRequest &oai_forecast_nn_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void forecastsForecastIdDELETECallback(OAIHttpRequestWorker *worker);
    void forecastsForecastIdGETCallback(OAIHttpRequestWorker *worker);
    void forecastsForecastIdPUTCallback(OAIHttpRequestWorker *worker);
    void forecastsGETCallback(OAIHttpRequestWorker *worker);
    void forecastsPOSTCallback(OAIHttpRequestWorker *worker);
    void forecastsTypesForecastsTypeIdDELETECallback(OAIHttpRequestWorker *worker);
    void forecastsTypesForecastsTypeIdGETCallback(OAIHttpRequestWorker *worker);
    void forecastsTypesForecastsTypeIdPUTCallback(OAIHttpRequestWorker *worker);
    void forecastsTypesGETCallback(OAIHttpRequestWorker *worker);
    void forecastsTypesPOSTCallback(OAIHttpRequestWorker *worker);
    void generateDemandForecastCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void forecastsForecastIdDELETESignal();
    void forecastsForecastIdGETSignal(OAIDemandForecast summary);
    void forecastsForecastIdPUTSignal(OAIDemandForecast summary);
    void forecastsGETSignal(QList<OAIDemandForecast> summary);
    void forecastsPOSTSignal(OAIDemandForecast summary);
    void forecastsTypesForecastsTypeIdDELETESignal();
    void forecastsTypesForecastsTypeIdGETSignal(OAIForecastsType summary);
    void forecastsTypesForecastsTypeIdPUTSignal(OAIForecastsType summary);
    void forecastsTypesGETSignal(QList<OAIForecastsType> summary);
    void forecastsTypesPOSTSignal(OAIForecastsType summary);
    void generateDemandForecastSignal();


    void forecastsForecastIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void forecastsForecastIdGETSignalFull(OAIHttpRequestWorker *worker, OAIDemandForecast summary);
    void forecastsForecastIdPUTSignalFull(OAIHttpRequestWorker *worker, OAIDemandForecast summary);
    void forecastsGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIDemandForecast> summary);
    void forecastsPOSTSignalFull(OAIHttpRequestWorker *worker, OAIDemandForecast summary);
    void forecastsTypesForecastsTypeIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void forecastsTypesForecastsTypeIdGETSignalFull(OAIHttpRequestWorker *worker, OAIForecastsType summary);
    void forecastsTypesForecastsTypeIdPUTSignalFull(OAIHttpRequestWorker *worker, OAIForecastsType summary);
    void forecastsTypesGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIForecastsType> summary);
    void forecastsTypesPOSTSignalFull(OAIHttpRequestWorker *worker, OAIForecastsType summary);
    void generateDemandForecastSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use forecastsForecastIdDELETESignalError() instead")
    void forecastsForecastIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsForecastIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsForecastIdGETSignalError() instead")
    void forecastsForecastIdGETSignalE(OAIDemandForecast summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsForecastIdGETSignalError(OAIDemandForecast summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsForecastIdPUTSignalError() instead")
    void forecastsForecastIdPUTSignalE(OAIDemandForecast summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsForecastIdPUTSignalError(OAIDemandForecast summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsGETSignalError() instead")
    void forecastsGETSignalE(QList<OAIDemandForecast> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsGETSignalError(QList<OAIDemandForecast> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsPOSTSignalError() instead")
    void forecastsPOSTSignalE(OAIDemandForecast summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsPOSTSignalError(OAIDemandForecast summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsTypesForecastsTypeIdDELETESignalError() instead")
    void forecastsTypesForecastsTypeIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsTypesForecastsTypeIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsTypesForecastsTypeIdGETSignalError() instead")
    void forecastsTypesForecastsTypeIdGETSignalE(OAIForecastsType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsTypesForecastsTypeIdGETSignalError(OAIForecastsType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsTypesForecastsTypeIdPUTSignalError() instead")
    void forecastsTypesForecastsTypeIdPUTSignalE(OAIForecastsType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsTypesForecastsTypeIdPUTSignalError(OAIForecastsType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsTypesGETSignalError() instead")
    void forecastsTypesGETSignalE(QList<OAIForecastsType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsTypesGETSignalError(QList<OAIForecastsType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsTypesPOSTSignalError() instead")
    void forecastsTypesPOSTSignalE(OAIForecastsType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsTypesPOSTSignalError(OAIForecastsType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateDemandForecastSignalError() instead")
    void generateDemandForecastSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void generateDemandForecastSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use forecastsForecastIdDELETESignalErrorFull() instead")
    void forecastsForecastIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsForecastIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsForecastIdGETSignalErrorFull() instead")
    void forecastsForecastIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsForecastIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsForecastIdPUTSignalErrorFull() instead")
    void forecastsForecastIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsForecastIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsGETSignalErrorFull() instead")
    void forecastsGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsPOSTSignalErrorFull() instead")
    void forecastsPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsTypesForecastsTypeIdDELETESignalErrorFull() instead")
    void forecastsTypesForecastsTypeIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsTypesForecastsTypeIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsTypesForecastsTypeIdGETSignalErrorFull() instead")
    void forecastsTypesForecastsTypeIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsTypesForecastsTypeIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsTypesForecastsTypeIdPUTSignalErrorFull() instead")
    void forecastsTypesForecastsTypeIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsTypesForecastsTypeIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsTypesGETSignalErrorFull() instead")
    void forecastsTypesGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsTypesGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forecastsTypesPOSTSignalErrorFull() instead")
    void forecastsTypesPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forecastsTypesPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateDemandForecastSignalErrorFull() instead")
    void generateDemandForecastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDemandForecastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
