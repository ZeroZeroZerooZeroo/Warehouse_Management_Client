/**
 * Warehouse Management API
 * API for managing all operations available in the application
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStockMovementsApi_H
#define OAI_OAIStockMovementsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMovementType.h"
#include "OAIMovementTypeCreate.h"
#include "OAIMovementTypeUpdate.h"
#include "OAIStockMovement.h"
#include "OAIStockMovementCreate.h"
#include "OAIStockMovementUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStockMovementsApi : public QObject {
    Q_OBJECT

public:
    OAIStockMovementsApi(const int timeOut = 0);
    ~OAIStockMovementsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void movementTypesGET();

    /**
    * @param[in]  movement_type_id qint32 [required]
    */
    virtual void movementTypesMovementTypeIdDELETE(const qint32 &movement_type_id);

    /**
    * @param[in]  movement_type_id qint32 [required]
    */
    virtual void movementTypesMovementTypeIdGET(const qint32 &movement_type_id);

    /**
    * @param[in]  movement_type_id qint32 [required]
    * @param[in]  oai_movement_type_update OAIMovementTypeUpdate [required]
    */
    virtual void movementTypesMovementTypeIdPUT(const qint32 &movement_type_id, const OAIMovementTypeUpdate &oai_movement_type_update);

    /**
    * @param[in]  oai_movement_type_create OAIMovementTypeCreate [required]
    */
    virtual void movementTypesPOST(const OAIMovementTypeCreate &oai_movement_type_create);


    virtual void stockMovementsGET();

    /**
    * @param[in]  movement_id qint32 [required]
    */
    virtual void stockMovementsMovementIdDELETE(const qint32 &movement_id);

    /**
    * @param[in]  movement_id qint32 [required]
    */
    virtual void stockMovementsMovementIdGET(const qint32 &movement_id);

    /**
    * @param[in]  movement_id qint32 [required]
    * @param[in]  oai_stock_movement_update OAIStockMovementUpdate [required]
    */
    virtual void stockMovementsMovementIdPUT(const qint32 &movement_id, const OAIStockMovementUpdate &oai_stock_movement_update);

    /**
    * @param[in]  oai_stock_movement_create OAIStockMovementCreate [required]
    */
    virtual void stockMovementsPOST(const OAIStockMovementCreate &oai_stock_movement_create);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void movementTypesGETCallback(OAIHttpRequestWorker *worker);
    void movementTypesMovementTypeIdDELETECallback(OAIHttpRequestWorker *worker);
    void movementTypesMovementTypeIdGETCallback(OAIHttpRequestWorker *worker);
    void movementTypesMovementTypeIdPUTCallback(OAIHttpRequestWorker *worker);
    void movementTypesPOSTCallback(OAIHttpRequestWorker *worker);
    void stockMovementsGETCallback(OAIHttpRequestWorker *worker);
    void stockMovementsMovementIdDELETECallback(OAIHttpRequestWorker *worker);
    void stockMovementsMovementIdGETCallback(OAIHttpRequestWorker *worker);
    void stockMovementsMovementIdPUTCallback(OAIHttpRequestWorker *worker);
    void stockMovementsPOSTCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void movementTypesGETSignal(QList<OAIMovementType> summary);
    void movementTypesMovementTypeIdDELETESignal();
    void movementTypesMovementTypeIdGETSignal(OAIMovementType summary);
    void movementTypesMovementTypeIdPUTSignal(OAIMovementType summary);
    void movementTypesPOSTSignal(OAIMovementType summary);
    void stockMovementsGETSignal(QList<OAIStockMovement> summary);
    void stockMovementsMovementIdDELETESignal();
    void stockMovementsMovementIdGETSignal(OAIStockMovement summary);
    void stockMovementsMovementIdPUTSignal(OAIStockMovement summary);
    void stockMovementsPOSTSignal(OAIStockMovement summary);


    void movementTypesGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIMovementType> summary);
    void movementTypesMovementTypeIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void movementTypesMovementTypeIdGETSignalFull(OAIHttpRequestWorker *worker, OAIMovementType summary);
    void movementTypesMovementTypeIdPUTSignalFull(OAIHttpRequestWorker *worker, OAIMovementType summary);
    void movementTypesPOSTSignalFull(OAIHttpRequestWorker *worker, OAIMovementType summary);
    void stockMovementsGETSignalFull(OAIHttpRequestWorker *worker, QList<OAIStockMovement> summary);
    void stockMovementsMovementIdDELETESignalFull(OAIHttpRequestWorker *worker);
    void stockMovementsMovementIdGETSignalFull(OAIHttpRequestWorker *worker, OAIStockMovement summary);
    void stockMovementsMovementIdPUTSignalFull(OAIHttpRequestWorker *worker, OAIStockMovement summary);
    void stockMovementsPOSTSignalFull(OAIHttpRequestWorker *worker, OAIStockMovement summary);

    Q_DECL_DEPRECATED_X("Use movementTypesGETSignalError() instead")
    void movementTypesGETSignalE(QList<OAIMovementType> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void movementTypesGETSignalError(QList<OAIMovementType> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movementTypesMovementTypeIdDELETESignalError() instead")
    void movementTypesMovementTypeIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void movementTypesMovementTypeIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movementTypesMovementTypeIdGETSignalError() instead")
    void movementTypesMovementTypeIdGETSignalE(OAIMovementType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void movementTypesMovementTypeIdGETSignalError(OAIMovementType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movementTypesMovementTypeIdPUTSignalError() instead")
    void movementTypesMovementTypeIdPUTSignalE(OAIMovementType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void movementTypesMovementTypeIdPUTSignalError(OAIMovementType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movementTypesPOSTSignalError() instead")
    void movementTypesPOSTSignalE(OAIMovementType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void movementTypesPOSTSignalError(OAIMovementType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stockMovementsGETSignalError() instead")
    void stockMovementsGETSignalE(QList<OAIStockMovement> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stockMovementsGETSignalError(QList<OAIStockMovement> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stockMovementsMovementIdDELETESignalError() instead")
    void stockMovementsMovementIdDELETESignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void stockMovementsMovementIdDELETESignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stockMovementsMovementIdGETSignalError() instead")
    void stockMovementsMovementIdGETSignalE(OAIStockMovement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stockMovementsMovementIdGETSignalError(OAIStockMovement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stockMovementsMovementIdPUTSignalError() instead")
    void stockMovementsMovementIdPUTSignalE(OAIStockMovement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stockMovementsMovementIdPUTSignalError(OAIStockMovement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stockMovementsPOSTSignalError() instead")
    void stockMovementsPOSTSignalE(OAIStockMovement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stockMovementsPOSTSignalError(OAIStockMovement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use movementTypesGETSignalErrorFull() instead")
    void movementTypesGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void movementTypesGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movementTypesMovementTypeIdDELETESignalErrorFull() instead")
    void movementTypesMovementTypeIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void movementTypesMovementTypeIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movementTypesMovementTypeIdGETSignalErrorFull() instead")
    void movementTypesMovementTypeIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void movementTypesMovementTypeIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movementTypesMovementTypeIdPUTSignalErrorFull() instead")
    void movementTypesMovementTypeIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void movementTypesMovementTypeIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use movementTypesPOSTSignalErrorFull() instead")
    void movementTypesPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void movementTypesPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stockMovementsGETSignalErrorFull() instead")
    void stockMovementsGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stockMovementsGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stockMovementsMovementIdDELETESignalErrorFull() instead")
    void stockMovementsMovementIdDELETESignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stockMovementsMovementIdDELETESignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stockMovementsMovementIdGETSignalErrorFull() instead")
    void stockMovementsMovementIdGETSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stockMovementsMovementIdGETSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stockMovementsMovementIdPUTSignalErrorFull() instead")
    void stockMovementsMovementIdPUTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stockMovementsMovementIdPUTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stockMovementsPOSTSignalErrorFull() instead")
    void stockMovementsPOSTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stockMovementsPOSTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
